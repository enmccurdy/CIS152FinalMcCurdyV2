@page
@model DrinkShopWebApp2.Pages.Orders.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Orders Index</h1>
<hr />
<p>
    @* can add bootstrap 'btn'' class and coloring ex. 'btn-primary'' to the Create button below
    just add to <a> start tag - class="btn btn-primary"
    *@
    <a asp-page="Create" class="btn btn-info">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Order[0].OrderDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Order[0].OrderFilled)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Order[0].OrderTotal)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Order[0].Customer)
            </th>
            @* <th></th> *@
            @* After wrapping below foreach block into an if block to deal w/
            null reference situation/verify there is something in the DB
            table to be displayed/bind. Add a 'Action' text into the
            <th> table header element below for the 'Edit/Delete/Details' buttons.
            *@
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @* Below foreach code - wrap it w/ an if statement before binding the data to check for
        situation where there is no data to display - so may get a 'null reference'
        exception. Condition checks that Order is NOT null && if Order contains 'Any' records,
        then only should it do the foreach block to bind each row of the Orders table to
        display each of the Order objects/entities in it. Add else statement block to specify
        what to should happen if no details to display from the DB Ordertable.
        <tr> - table row element, <td> - table data element,
        *@
        @if (Model.Order != null && Model.Order.Any())
        {
            @foreach (var item in Model.Order)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderFilled)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderTotal)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Customer.FirstName)
                    </td>
                    @* <td>
                        @Html.DisplayFor(modelItem => item.Customer.FirstName + " " + item.Customer.LastName)
                    </td> *@
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.OrderId">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.OrderId">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.OrderId">Delete</a>
                    </td>
                </tr>
            }
        }
        @* Add else statement block to specify what to should happen if no details to display
        from the DB Orders table. Since above would span 4 columns - using 'colspan="4"'
        <tr> - table row element, <td> - table data element - add text to explain/display
        message to user. *@
        else
        {
            <tr>
                <td colspan="4" class="text-center">No Orders in the database.</td>
            </tr>
        }
    </tbody>
</table>
