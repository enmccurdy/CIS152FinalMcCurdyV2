@page
@model DrinkShopWebApp2.Pages.Drinks.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Drinks Index</h1>
<hr />
<p>
    @* can add bootstrap 'btn'' class and coloring ex. 'btn-primary'' to the Create button below
    just add to <a> start tag - class="btn btn-primary" 
    *@
    <a class="btn btn-info" asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Drink[0].DrinkName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Drink[0].DrinkType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Drink[0].DrinkSize)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Drink[0].DrinkPrice)
            </th>
            @* <th></th> *@
            @* After wrapping below foreach block into an if block to deal w/
                null reference situation/verify there is something in the DB
                table to be displayed/bind. Add a 'Action' text into the
                <th> table header element below for the 'Edit/Delete/Details' buttons.
            *@
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
@* Below foreach code - wrap it w/ an if statement before binding the data to check for 
    situation where there is no data to display - so may get a 'null reference' 
    exception. Condition checks that Drink is NOT null && if Drink contains 'Any' records,
    then only should it do the foreach block to bind each row of the Drinks table to 
    display each of the Drink objects/entities in it. Add else statement block to specify
    what to should happen if no details to display from the DB Drink table. 
    <tr> - table row element, <td> - table data element, 
*@

        @if(Model.Drink != null && Model.Drink.Any())
        {
            @foreach (var item in Model.Drink)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.DrinkName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DrinkType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DrinkSize)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DrinkPrice)
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.DrinkId">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.DrinkId">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.DrinkId">Delete</a>
                    </td>
                </tr>
            }
        }
        @* Add else statement block to specify what to should happen if no details to display 
            from the DB Drink table. Since above would span 4 columns - using 'colspan="4"'
            <tr> - table row element, <td> - table data element - add text to explain/display
                message to user. *@
        else
        {
            <tr>
                <td colspan="4" class="text-center">No Drinks in the database.</td>
            </tr>
        }
        @* @foreach (var item in Model.Drink) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.DrinkName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DrinkType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DrinkSize)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DrinkPrice)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.DrinkId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.DrinkId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.DrinkId">Delete</a>
            </td>
        </tr>
} *@
    </tbody>
</table>
